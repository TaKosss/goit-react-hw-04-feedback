{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\GitHub\\\\goit-react-hw-02-feedback\\\\src\\\\components\\\\Feedback\\\\Feedback.jsx\";\nimport PropTypes from 'prop-types';\nimport { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Feedback extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.handleGood = () => {\n      this.setState(prevState => ({\n        good: prevState.good + 1\n      }));\n    };\n\n    this.handleNetural = () => {\n      this.setState(prevState => ({\n        neutral: prevState.neutral + 1\n      }));\n    };\n\n    this.handleBad = () => {\n      this.setState(prevState => ({\n        bad: prevState.bad + 1\n      }));\n    };\n\n    this.countTotalFeedback = () => {\n      const {\n        good,\n        neutral,\n        bad\n      } = this.state;\n      const total = good + neutral + bad;\n      return total;\n    };\n\n    this.countPositiveFeedbackPercentage = () => {\n      const total = this.countTotalFeedback(); // const { good } = this.state;\n      // const percentage = (good * 100) / total;\n\n      const percentage = this.state.good * 100 / total;\n      return Math.round(percentage);\n    };\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    const total = this.countTotalFeedback();\n    const percentage = this.countPositiveFeedbackPercentage();\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"feedback_title\",\n        children: \"Please leave feedback\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleGood,\n          children: \"Good\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleNetural,\n          children: \"Netural\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.handleBad,\n          children: \"Bad\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"statistic_title\",\n        children: \"Statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"statistic_text\",\n        children: [\"Neutral: \", neutral]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"statistic_text\",\n        children: [\"Good: \", good]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"statistic_text\",\n        children: [\"Bad: \", bad]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"statistic_text\",\n        children: [\"Total: \", total]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"statistic_text\",\n        children: [\"Positive feedback: \", percentage, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Feedback.propTypes = {\n//   state: PropTypes.shape({\n//     good: PropTypes.number,\n//     neutral: PropTypes.number,\n//     bad: PropTypes.number,\n//   }),\n// };","map":{"version":3,"sources":["C:/Users/Admin/Documents/GitHub/goit-react-hw-02-feedback/src/components/Feedback/Feedback.jsx"],"names":["PropTypes","Component","Feedback","state","good","neutral","bad","handleGood","setState","prevState","handleNetural","handleBad","countTotalFeedback","total","countPositiveFeedbackPercentage","percentage","Math","round","render"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Component } from 'react';\r\n\r\nexport class Feedback extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleGood = () => {\r\n    this.setState(prevState => ({\r\n      good: prevState.good + 1,\r\n    }));\r\n  };\r\n\r\n  handleNetural = () => {\r\n    this.setState(prevState => ({\r\n      neutral: prevState.neutral + 1,\r\n    }));\r\n  };\r\n\r\n  handleBad = () => {\r\n    this.setState(prevState => ({\r\n      bad: prevState.bad + 1,\r\n    }));\r\n  };\r\n\r\n  countTotalFeedback = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = good + neutral + bad;\r\n    return total;\r\n  };\r\n\r\n  countPositiveFeedbackPercentage = () => {\r\n    const total = this.countTotalFeedback();\r\n    // const { good } = this.state;\r\n    // const percentage = (good * 100) / total;\r\n    const percentage = (this.state.good * 100) / total;\r\n    return Math.round(percentage);\r\n  };\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const total = this.countTotalFeedback();\r\n    const percentage = this.countPositiveFeedbackPercentage();\r\n\r\n    return (\r\n      <div className=\"main_container\">\r\n        <h1 className=\"feedback_title\">Please leave feedback</h1>\r\n        <div className=\"btn_container\">\r\n          <button className=\"btn\" onClick={this.handleGood}>\r\n            Good\r\n          </button>\r\n          <button className=\"btn\" onClick={this.handleNetural}>\r\n            Netural\r\n          </button>\r\n          <button className=\"btn\" onClick={this.handleBad}>\r\n            Bad\r\n          </button>\r\n        </div>\r\n        <h2 className=\"statistic_title\">Statistics</h2>\r\n        <p className=\"statistic_text\">Neutral: {neutral}</p>\r\n        <p className=\"statistic_text\">Good: {good}</p>\r\n        <p className=\"statistic_text\">Bad: {bad}</p>\r\n        <p className=\"statistic_text\">Total: {total}</p>\r\n        <p className=\"statistic_text\">Positive feedback: {percentage}%</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Feedback.propTypes = {\r\n//   state: PropTypes.shape({\r\n//     good: PropTypes.number,\r\n//     neutral: PropTypes.number,\r\n//     bad: PropTypes.number,\r\n//   }),\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}